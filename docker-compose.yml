version: '3.8'
services:
  # PostgreSQL for Airflow
  postgres:
    image: postgres:13
    container_name: airflow-postgres
    hostname: postgres
    environment:
      POSTGRES_DB: airflow
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - project_network
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow", "-d", "airflow"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Redis for Celery
  redis:
    image: redis:latest
    container_name: airflow-redis
    networks:
      - project_network
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Airflow Initialization
  airflow-init:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    container_name: airflow-init
    user: "0:0"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      _AIRFLOW_DB_MIGRATE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: airflow
      _AIRFLOW_WWW_USER_PASSWORD: airflow
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/config:/opt/airflow/config
      - ./data:/opt/airflow/data
    networks:
      - project_network
    command: version
    restart: on-failure

  # Airflow Webserver
  airflow-webserver:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    container_name: airflow-webserver
    user: "0:0"
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__WEBSERVER__SECRET_KEY: "your-secret-key-for-airflow"
      AIRFLOW__CLI__ENDPOINT_URL: http://localhost:8080
    ports:
      - "8080:8080"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - ./airflow/config:/opt/airflow/config
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - project_network
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 120s
      timeout: 60s
      retries: 5
      start_period: 120s
    restart: unless-stopped

  # Airflow Scheduler
  airflow-scheduler:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    container_name: airflow-scheduler
    hostname: airflow-scheduler
    user: "0:0"
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: "true"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - ./airflow/config:/opt/airflow/config
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - project_network
    command: scheduler
    healthcheck:
      test: ["CMD", "airflow", "jobs", "check", "--job-type", "SchedulerJob", "--hostname", "airflow-scheduler"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 90s
    restart: unless-stopped

  # Airflow Worker 1
  airflow-worker-1:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    container_name: airflow-worker-1
    user: "0:0"
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - ./airflow/config:/opt/airflow/config
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - project_network
    command: celery worker
    healthcheck:
      test: ["CMD", "celery", "--app", "airflow.executors.celery_executor.app", "inspect", "ping", "-d", "celery@$${HOSTNAME}"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 90s
    restart: unless-stopped

  # Airflow Worker 2
  airflow-worker-2:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    container_name: airflow-worker-2
    user: "0:0"
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - ./airflow/config:/opt/airflow/config
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - project_network
    command: celery worker
    healthcheck:
      test: ["CMD", "celery", "--app", "airflow.executors.celery_executor.app", "inspect", "ping", "-d", "celery@$${HOSTNAME}"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 90s
    restart: unless-stopped

  # Airflow Flower
  airflow-flower:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    container_name: airflow-flower
    user: "0:0"
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "5555:5555"
    networks:
      - project_network
    command: celery flower
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    hostname: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/data
      - zookeeper_logs:/datalog
    networks:
      - project_network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    hostname: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - project_network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Kafka Topic Setup
  kafka-topic-setup:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      bash -c "
        echo 'Waiting for Kafka to be ready...'
        cub kafka-ready -b kafka:9092 1 60
        echo 'Creating topics...'
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --topic logs --partitions 1 --replication-factor 1
        echo 'Topics created!'
      "
    networks:
      - project_network

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: dataco-kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
    networks:
      - project_network
    restart: unless-stopped

  # MLflow
  mlflow:
    build:
      context: ./mlflow
      dockerfile: Dockerfile
    container_name: mlflow
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "5001:5000"
    command: >
      bash -c "sleep 30 && pip install psycopg2-binary && mlflow server --host 0.0.0.0 --port 5000 --backend-store-uri postgresql://airflow:airflow@postgres:5432/mlflow --default-artifact-root /mlruns"
    volumes:
      - ./mlflow/mlruns:/mlruns
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - project_network
    restart: unless-stopped

  # Streamlit
  streamlit:
    build:
      context: ./streamlit
      dockerfile: Dockerfile
    container_name: streamlit
    ports:
      - "8501:8501"
    command: python -m streamlit run app.py --server.port 8501 --server.address 0.0.0.0
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - project_network
    restart: unless-stopped

  # DBT
  dbt:
    image: ghcr.io/dbt-labs/dbt-snowflake:latest
    container_name: dbt
    volumes:
      - ./dbt_project:/usr/app/dbt/
    environment:
      SNOWFLAKE_ACCOUNT: ${SNOWFLAKE_ACCOUNT:-your_account.snowflakecomputing.com}
      SNOWFLAKE_USER: ${SNOWFLAKE_USER:-logistics_user}
      SNOWFLAKE_PASSWORD: ${SNOWFLAKE_PASSWORD:-your_secure_password}
      SNOWFLAKE_DATABASE: ${SNOWFLAKE_DATABASE:-dataco}
      SNOWFLAKE_WAREHOUSE: ${SNOWFLAKE_WAREHOUSE:-compute_wh}
      SNOWFLAKE_SCHEMA: ${SNOWFLAKE_SCHEMA:-public}
    working_dir: /usr/app/dbt
    entrypoint: ["/bin/bash", "-c"]
    command: ["sleep infinity"]
    networks:
      - project_network
    restart: unless-stopped

  # Logistics API (FastAPI)
  logistics-api:
    build:
      context: ./fastapi
      dockerfile: Dockerfile
    container_name: logistics-api
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    ports:
      - "8000:8000"
    command: >
      uvicorn main:app --host 0.0.0.0 --port 8000
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - project_network
    restart: unless-stopped

  # Grafana
  grafana:
    image: grafana/grafana:10.0.0
    container_name: grafana
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: Viewer
    ports:
      - "3000:3000"
    volumes:
      - ./visualization/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana_data:/var/lib/grafana
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - project_network
    restart: unless-stopped

  # Kafka to Snowflake Consumer
  kafka-to-snowflake:
    build:
      context: ./consumer
      dockerfile: Dockerfile
    container_name: kafka-to-snowflake
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      SNOWFLAKE_ACCOUNT: ${SNOWFLAKE_ACCOUNT:-your_account.snowflakecomputing.com}
      SNOWFLAKE_USER: ${SNOWFLAKE_USER:-logistics_user}
      SNOWFLAKE_PASSWORD: ${SNOWFLAKE_PASSWORD:-your_secure_password}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - project_network
    restart: unless-stopped

# Volumes for data persistence
volumes:
  postgres_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  grafana_data:
  mlruns:

# Custom network for isolation
networks:
  project_network:
    driver: bridge

